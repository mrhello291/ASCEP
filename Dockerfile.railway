# Multi-stage build for Railway deployment
FROM python:3.11-slim as backend-builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy backend requirements
COPY backend/requirements.txt .
COPY backend/services/api_gateway/requirements.txt ./services/api_gateway.txt
COPY backend/services/health/requirements.txt ./services/health.txt
COPY backend/services/price_feeds/requirements.txt ./services/price_feeds.txt
COPY backend/services/arbitrage/requirements.txt ./services/arbitrage.txt
COPY backend/services/cep_engine/requirements.txt ./services/cep_engine.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir -r services/api_gateway.txt
RUN pip install --no-cache-dir -r services/health.txt
RUN pip install --no-cache-dir -r services/price_feeds.txt
RUN pip install --no-cache-dir -r services/arbitrage.txt
RUN pip install --no-cache-dir -r services/cep_engine.txt

# Copy backend code
COPY backend/ ./backend/

# Frontend build stage
FROM node:18-alpine as frontend-builder

WORKDIR /app/frontend

# Copy frontend files
COPY frontend/package*.json ./
COPY frontend/pnpm-lock.yaml ./

# Install dependencies
RUN npm install -g pnpm && pnpm install

# Copy frontend source
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/tailwind.config.js .
COPY frontend/postcss.config.js .

# Build frontend for production
RUN pnpm run build

# Final production stage
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy Python dependencies and backend code
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /app/backend ./backend

# Copy built frontend
COPY --from=frontend-builder /app/frontend/build ./frontend/build

# Copy configuration files
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY nginx.conf /etc/nginx/nginx.conf

# Create necessary directories
RUN mkdir -p /var/log/supervisor /var/log/nginx

# Expose port
EXPOSE 5000

# Start supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 